package io.vertx.mutiny.sqlclient;

import java.util.function.Function;

import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.Uni;

/**
 * Utilities for generating {@link Multi} and {@link Uni} with a {@link SqlClient}.
 */
public class SqlClientHelper {

    /**
     * Generates a {@link Multi} from operations executed inside a {@link Transaction}.
     *
     * @param pool the {@link Pool}
     * @param sourceSupplier a user-provided function returning a {@link Multi} generated by interacting with the given
     *        {@link SqlClient}
     * @param <T> the type of the items emitted by the {@link Multi}
     * @return a {@link Multi} generated from operations executed inside a {@link Transaction}
     */
    public static <T> Multi<T> inTransactionMulti(Pool pool, Function<SqlClient, Multi<T>> sourceSupplier) {
        return usingConnectionMulti(pool, conn -> {
            return conn
                    .begin()
                    .onItem().transformToMulti(transaction -> {
                        Multi<T> multi = sourceSupplier.apply(pool)
                                .onCompletion().call(() -> transaction.commit())
                                .onFailure().call(() -> transaction.rollback());
                        return multi;
                        //                        return multi.onTermination()
                        //                                .call((failure, cancellation) -> {
                        //                                    System.out.println("Failing or cancelling " + failure);
                        //                                    if (cancellation || failure != null) {
                        //                                        // The failure will be propagated downstream
                        //                                        System.out.println("rollback");
                        //                                        return transaction.rollback();
                        //                                    } else {
                        //                                        return transaction.commit();
                        //                                    }
                        //                                });
                    });
        });
    }

    /**
     * Generates a {@link Uni} from operations executed inside a {@link Transaction}.
     *
     * @param pool the {@link Pool}
     * @param sourceSupplier a user-provided function returning a {@link Uni} generated by interacting with the given
     *        {@link SqlClient}
     * @param <T> the type of the items emitted by the {@link Uni}
     * @return a {@link Uni} generated from operations executed inside a {@link Transaction}
     */
    public static <T> Uni<T> inTransactionUni(Pool pool, Function<SqlClient, Uni<T>> sourceSupplier) {
        return usingConnectionUni(pool, conn -> conn.begin()
                .onItem().transformToUni(tx -> sourceSupplier.apply(pool)
                        .onItemOrFailure().transformToUni((res, fail) -> {
                            if (fail != null) {
                                //noinspection unchecked
                                return (Uni<T>) tx.rollback().onItem().failWith(x -> fail);
                            } else {
                                return tx.commit().onItem().transform(x -> res);
                            }
                        })));
    }

    /**
     * Generates a {@link Multi} from {@link SqlConnection} operations.
     *
     * @param pool the {@link Pool}
     * @param sourceSupplier a user-provided function returning a {@link Multi} generated by interacting with the given
     *        {@link SqlConnection}
     * @param <T> the type of the items emitted by the {@link Multi}
     * @return a {@link Multi} generated from {@link SqlConnection} operations
     */
    public static <T> Multi<T> usingConnectionMulti(Pool pool, Function<SqlConnection, Multi<T>> sourceSupplier) {
        return pool.getConnection().onItem().transformToMulti(conn -> {
            try {
                return sourceSupplier.apply(conn)
                        .onTermination().call(conn::close);
            } catch (Throwable t) {
                return conn.close()
                        .onItem().transformToMulti(x -> Multi.createFrom().failure(t));
            }
        });
    }

    /**
     * Generates a {@link Uni} from {@link SqlConnection} operations.
     *
     * @param pool the {@link Pool}
     * @param sourceSupplier a user-provided function returning a {@link Uni} generated by interacting with the given
     *        {@link SqlConnection}
     * @param <T> the type of the item emitted by the {@link Uni}
     * @return a {@link Uni} generated from {@link SqlConnection} operations
     */
    public static <T> Uni<T> usingConnectionUni(Pool pool, Function<SqlConnection, Uni<T>> sourceSupplier) {
        return pool.getConnection().onItem().transformToUni(conn -> {
            try {
                return sourceSupplier.apply(conn).onTermination().call(conn::close);
            } catch (Throwable t) {
                //noinspection unchecked
                return (Uni<T>) conn.close()
                        .onItem().failWith(x -> t);
            }
        });
    }

    private SqlClientHelper() {
        // Utility
    }
}
